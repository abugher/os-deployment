#!/bin/bash


function shadow_line() {
  user="${1}"
  valid_characters=()
  for c in {a..z} {A..Z} {0..9} '/' '.'; do
    valid_characters+=( "${c}" )
  done
  salt=
  for i in {1..16}; do
    i=$(( RANDOM % 64 ))
    salt+="${valid_characters[i]}"
  done
  salt_length="$(wc -m <<< "${salt}")"
  if ! test "${salt_length}" -eq 17; then
    fail "Failed to generate a salt of appropriate length.  ($(( salt_length - 1)) / 16)"
  fi
  pass show "aaron/${host}/${user}" \
    > /dev/null \
    || fail "Failed to retrieve password from pass for:  '${user}@${host}'"
  password_length="$(pass show "aaron/${host}/${user}" | wc -m)"
  if ! test "${password_length}" -gt 4; then
    fail "Failed to generate a password of appropriate length.  (${password_length} / 4)"
  fi
  hash="$(
    pass show "aaron/${host}/${user}" \
      | mkpasswd -S "${salt}" -m sha-512 --stdin \
      || fail "mkpasswd returned:  ${?}"
  )"
  hash_length="$(wc -m <<< "${hash}")"
  if ! test "${hash_length}" -eq 107; then
    fail "Failed to generate a hash of appropriate length.  ($((hash_length - 1)) / 106)"
  fi
  days_since_epoch="$(( $(date +%s) / 60 / 60 / 24 ))"
  if ! test "${days_since_epoch}" -gt 1; then
    fail "Failed to generate a reasonable number of days since the epoch.  (${days_since_epoch} / 1)"
  fi

  echo "${user}:${hash}:${days_since_epoch}::::::"
}
