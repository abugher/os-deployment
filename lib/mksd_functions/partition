#!/bin/bash


function resize_root_partition() {
  if test 'set' = "${root_partition_end:+set}"; then
    # Order of operations here (resize partition then resize filesystem) is
    # only correct if the volume is growing, not shrinking.
    output "Resizing root partition."
    eval sudo parted -s '"${card_device}"' resizepart '"${root_partition_index}"' '"${root_partition_end}"' ">&${debug_level_command_output}" \
      || fail "Failed to resize root partition."
    wait_for_device "${root_partition}"
    output "Resizing root filesystem."
    eval sudo e2fsck -fy '"${root_partition}"' ">&${debug_level_command_output}" \
      || fail "Failed to check root filesystem."
    eval sudo resize2fs '"${root_partition}"' ">&${debug_level_command_output}" \
      || fail "Failed to resize root filesystem."
  fi
}


function create_big_partition() {
  output "Getting storage parameters."
  parted_output=$(
    sudo parted -s "${card_device}" unit s print free \
      || fail "Failed to analyze device:  '${card_device}'"
  )
  output "Creating big partition."
  eval sudo parted -s '"${card_device}"' mkpart primary '"${big_partition_start}"' '"${big_partition_end}"' ">&${debug_level_command_output}" \
    || fail "Failed to write big partition."
  wait_for_device "${big_partition}"
  output "Zeroing beginning of big partition."
  eval sudo dd if=/dev/zero of='"${big_partition}"' bs=$(( 1024 * 1024 )) count=1 status=none ">&${debug_level_command_output}" \
    || fail "Failed to zero beginning of big partition."
  if ! test 'set' = "${use_big_partition:+set}"; then
    return 0
  fi

  # Sometimes the device file disappears for a moment after being zeroed.
  wait_for_device "${big_partition}"

  output "Writing filesystem to big partition:  ${big_partition}"
  case "${big_partition_filesystem}" in
    f2fs)
      force_flag='-f'
      label_flag='-l'
      ;;
    ext4)
      force_flag='-F'
      label_flag='-L'
      ;;
    *)
      fail "Unrecognized filesystem for big partition:  ${big_partition_filesystem}"
      ;;
  esac

  eval sudo mkfs.'"${big_partition_filesystem}"' '"${force_flag}"' '"${label_flag}"' '"${big_partition_label}"' '"${big_partition}"' ">&${debug_level_command_output}" \
    || fail "Failed to write filesystem to big partition."
}


function sync_big_partition() {
  if ! test 'set' = "${use_big_partition:+set}"; then
    return 0
  fi
  output "Mounting:  ${big_partition}"
  output "  ... to:  ${target_mount_point}2"
  eval sudo mount -t '"${big_partition_filesystem}"' '"${big_partition}"' '"${target_mount_point}2"' ">&${debug_level_command_output}" \
    || fail "Failed to mount big partition to alternative mount point."
  output "Syncing old contents of mount point to new big partition..."
  output "... from:  ${target_mount_point}${big_partition_mount_point}/"
  output "  ... to:  ${target_mount_point}2/"
  eval sudo mkdir -p '"${target_mount_point}${big_partition_mount_point}/"' ">&${debug_level_command_output}" \
    || fail "Failed to create mount point."
  eval sudo rsync -a '"${target_mount_point}${big_partition_mount_point}/"' '"${target_mount_point}2/"' ">&${debug_level_command_output}" \
    || fail "Failed to sync contents of mount point to big partition."
  output "Removing old contents of mount point."
  for f in $(ls -a "${target_mount_point}${big_partition_mount_point}/"); do
    if ! test '.' = "${f}" && ! test '..' = "${f}"; then
      eval sudo rm -rf '"${target_mount_point}${big_partition_mount_point}/${f}"' ">&${debug_level_command_output}" \
        || fail "Failed to remove contents of mount point."
    fi
  done
  output "Unmounting:  ${target_mount_point}2/"
  eval sudo umount '"${target_mount_point}2/"' ">&${debug_level_command_output}" \
    || fail "Failed to unmount big partition from alternate mount point."
}


function remove_partitions() {
  output "Removing partitions."
  for partition_device in "${card_device}"*; do
    index="$(sed 's/^[^0-9]*//g' <<< "${partition_device}")"
    if test '' = "${index}"; then continue; fi
    if test -f "${card_device}${index}"; then
      output "$(ls -l "${card_device}${index}")"
      fail "Regular file at device file location:  ${card_device}${index}"
    fi
    output "Removing partition ${index}."
    eval sudo parted -s '"${card_device}"' rm '"${index}"' ">&${debug_level_command_output}" \
      || fail "Failed to remove partition ${index}."
  done
}
