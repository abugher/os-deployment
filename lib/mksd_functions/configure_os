#!/bin/bash


function configure_os() {
  fix_fstab
  fix_logging
  fix_passwd
  fix_files
  fix_default_target
  fix_network
  fix_ssh
  fix_rc_local
}


function fix_fstab() {
  if test 'set' = "${fstab_root_device:+set}"; then
    output "Fixing root line in /etc/fstab."
    if awk '/^[^#]/ {print $2}' "${target_mount_point}"/etc/fstab | grep -q '^/$'; then
      sudo sed -i -E "s#^[^[:space:]]+([[:space:]]+/[[:space:]])#${fstab_root_device}\\1#" "${target_mount_point}"/etc/fstab \
        || fail "Failed to modify root line in /etc/fstab."
    else
      eval sudo tee -a '"${target_mount_point}/etc/fstab"' \
        '<<<' '"${fstab_root_device}" / ext4 noatime,defaults 0 1' ">&${debug_level_file_contents}" \
        || fail "Failed to add root line to /etc/fstab."
    fi
  fi

  if test 'set' = "${use_big_partition:+set}"; then
    output "Writing big partition line to /etc/fstab."
    eval sudo tee -a '"${target_mount_point}/etc/fstab"' \
      '<<<' '"LABEL=${big_partition_label} ${big_partition_mount_point} ${big_partition_filesystem} defaults,noatime,nodiratime 0 2"' ">&${debug_level_file_contents}" \
      || fail "Failed to write big partition line to /etc/fstab"
  fi
}


function fix_logging() {
  if test "set" = "${log_to_disk:+set}"; then
    # log2ram is probably good for sd card life.
    output "Disabling log2ram."
    eval sudo sed -i "'"'s/^ENABLED=.*$/ENABLED=false/'"'" '"${target_mount_point}/etc/default/armbian-ramlog"' ">&${debug_level_command_output}" \
      || fail "Failed to disabled log2ram."
  fi
}


function fix_passwd() {
  write_root_password_hash

  output "Deleting password hash for pi."
  eval sudo sed -i "'s/^pi:.*\$/pi:*:18409:0:99999:7:::/'" '"${target_mount_point}/etc/shadow"' ">&${debug_level_command_output}" \
    || fail "Failed to delete password hash for pi."

  output "Disabling password authentication for pi."
  eval sudo sed -Ei "'s/^pi:[^:]*:(.*)\$/pi:*:\\1\\/home\\/pi:\\/bin\\/bash/'" '"${target_mount_point}/etc/passwd"' ">&${debug_level_command_output}" \
    || fail "Failed to disable password authentication for pi."
}


function fix_files() {
  for file in "${remove_files[@]}" "${null_link_files[@]}"; do 
    output "Removing:  ${file}"
    eval sudo rm -f '"${target_mount_point}/${file}"' ">&${debug_level_command_output}" \
      || fail "Failed to remove:  ${file}"
  done

  for file in "${null_link_files[@]}"; do
    dir="${target_mount_point}/${file%/*}"
    if ! test -d "${dir}"; then
      output "Creating directory:  ${dir}"
      eval sudo mkdir -p '"${dir}"' ">&${debug_level_command_output}"
    fi
    output "Replacing file with symlink to /dev/null:  '${file}'"
    eval sudo ln -s /dev/null '"${target_mount_point}/${file}"' ">&${debug_level_command_output}" \
      || fail "Failed to replace file with symlink to /dev/null:  '${file}'"
  done
}


function fix_default_target() {
  if test 'set' = "${systemd_default_target:+set}"; then
    output "Fixing default.target."
    eval sudo rm -f '"${target_mount_point}/etc/systemd/system/default.target"' ">&${debug_level_command_output}" \
      || fail "Failed to remove:  /etc/systemd/system/default.target"
    eval sudo ln -s '"${systemd_default_target}"' '"${target_mount_point}/etc/systemd/system/default.target"' ">&${debug_level_command_output}" \
      || fail "Failed to create link:  /etc/systemd/system/default.target -> ${systemd_default_target}"
  fi
}


function fix_network() {
  output "Reading WPA PSK from pass."
  wpa_psk=$(pass show aaron/network/"${network_name}"/wpa_psk) \
    || fail "Failed to read WPA PSK from pass."

  output "Templating network interface configuration."
  if test 'static' = $network_addressing; then
    template wireless_interface_conf_static /etc/network/interfaces.d/"${wireless_interface}"
  elif test 'dhcp' = $network_addressing; then
    template wireless_interface_conf_dhcp /etc/network/interfaces.d/"${wireless_interface}"
  else
    fail "\$network_addressing not set or invalid.  (${network_addressing})"
  fi
  template wired_interface_conf /etc/network/interfaces.d/"${wired_interface}"
  template master_interfaces_conf /etc/network/interfaces

  if test 'set' = "${disable_predictable_ifnames_for_armbian:+set}"; then
    output "Disabling predictable network interface naming in:  /boot/armbianEnv.txt"
    eval sudo tee -a '"${target_mount_point}/boot/armbianEnv.txt"' \
      '<<<' "'extraargs=net.ifnames=0 biosdevname=0'" \
      ">&${debug_level_file_contents}" \
      || fail "Failed to disable preditable network interface naming in:  /boot/armbianEnv.txt"
  fi
}


function fix_ssh() {
  template sshd_config /etc/ssh/sshd_config

  output "Writing ssh service file."
  eval sudo ln -s /lib/systemd/system/ssh.service '"${target_mount_point}/etc/systemd/system/default.target.wants/ssh.service"' ">&${debug_level_command_output}" \
    || fail "Failed to write ssh service file."

  output "Initializing SSH host key (private)."
  eval sudo touch '"${target_mount_point}/etc/ssh/ssh_host_rsa_key"' ">&${debug_level_command_output}" \
    || fail "Failed to initialize SSH host key (private)."
  output "Setting permissions on SSH host key (private)."
  eval sudo chmod 0600 '"${target_mount_point}/etc/ssh/ssh_host_rsa_key"' ">&${debug_level_command_output}" \
    || fail "Failed to set permissions on SSH host key (private)."

  host_key_priv_file="../sensitive_ansible/inventory/hosts/${host}/files/ssh_keys/ssh_host_rsa_key"
  output "Writing SSH host key (private)."
  test -e "${host_key_priv_file}" \
    || fail "SSH host key (private) is missing."
  eval sudo tee '"${target_mount_point}/etc/ssh/ssh_host_rsa_key"' \
    '<' '"${host_key_priv_file}"' ">&${debug_level_file_contents}" \
    || fail "Failed to write SSH host key (private)."

  host_key_pub_file=../ansible/inventory/hosts/${host}/files/ssh_keys/ssh_host_rsa_key.pub
  output "Writing SSH host key (public)."
  test -e "${host_key_pub_file}" \
    || fail "SSH host key (public) is missing."
  eval sudo tee '"${target_mount_point}/etc/ssh/ssh_host_rsa_key.pub"' \
    '<' '"${host_key_pub_file}"' \
    ">&${debug_level_file_contents}" \
    || fail "Failed to write SSH host key (public)."

  output "Installing authorized key."
  eval sudo mkdir -p '"${target_mount_point}/root/.ssh"' \
    || fail "Failed to create directory for authorized key."
  eval sudo tee '"${target_mount_point}/root/.ssh/authorized_keys"' \
    '<' /home/aaron/.ssh/public \
    ">&${debug_level_file_contents}" \
    || fail "Failed to install authorized key."
}


function fix_rc_local() {
  template rc_local_conf /etc/rc.local

  if test "yes" = "${kick_wifi}"; then
    template kick_wifi_conf /usr/local/bin/kick_wifi

    output "Setting permissions (0755) on kick_wifi script."
    eval sudo chmod 0755 '"${target_mount_point}/usr/local/bin/kick_wifi"' ">&${debug_level_command_output}" \
      || fail "Failed to chmod 0755 kick_wifi script."

    output "Appending kick_wifi line to:  /etc/rc.local"
    eval sudo tee -a '"${target_mount_point}/etc/rc.local"' \
      '<<<' '/usr/local/bin/kick_wifi' \
      ">&${debug_level_file_contents}" \
      || fail "Failed to append kick_wifi line to:  /etc/rc.local"
  fi

  output "Writing 'exit 0' line to:  /etc/rc.local"
  eval sudo tee -a '"${target_mount_point}/etc/rc.local"' \
    '<<<' "'exit 0'" \
      ">&${debug_level_file_contents}" \
    || fail "Failed to write 'exit 0' line to:  /etc/rc.local"
}
