#!/bin/bash


function main() {
  card_device=/dev/sdc
  label=log
  mount_point=/var/log
  wired_interface=eth0
  wireless_interface=wlan0
  root_partition_index=1
  big_partition_index=2


  target_host_name="${1}"
  case "${target_host_name}" in
    files)
      image=~/images/odroid_hc1/Armbian_5.98_Odroidxu4_Debian_buster_default_4.14.141_minimal.img
      ip_address=192.168.11.62
      wired_interface=enx001e0636856d
      ;;
    spy)
      image=~/images/raspberry_pi/raspios.img
      boot_partition_index=1
      root_partition_index=2
      big_partition_index=3
      ip_address=192.168.11.67
      label=motion
      mount_point=/var/lib/motion
      kick_wifi=yes
      #wireless_interface=wlan0_disabled
      wired_interface=eth0_disabled
      ;;
    workstation)
      image=~/images/raspberry_pi/raspios.img
      boot_partition_index=1
      root_partition_index=2
      big_partition_index=3
      ip_address=192.168.11.75
      label=home
      mount_point=/home
      kick_wifi=yes
      wireless_interface=wlan1
      #wireless_interface=wlan0_disabled
      wired_interface=eth0_disabled
      ;;
    partybus)
      image=~/images/banana_pi/armbian.m2.img
      ip_address=192.168.11.64
      wired_interface=eth0_disabled
      #wireless_interface=wlan0_disabled
      kick_wifi=yes
      ;;
    catcher)
      #debug=yes
      image=~/images/orange_pi/armbian.img
      ip_address=192.168.11.74
      wired_interface=eth0_disabled
      #wireless_interface=wlan0_disabled
      kick_wifi=yes
      ;;
    *)
      fail "Unrecognized target host name:  '${target_host_name}'"
      ;;
  esac

  root_partition="${card_device}${root_partition_index}"
  if test 'set' = "${boot_partition_index:+set}"; then
    boot_partition="${card_device}${boot_partition_index}"
  fi
  big_partition="${card_device}${big_partition_index}"

  actions
}


function actions() {
  get_root
  keep_root &
  sudo_loop_pid=$!
  unmount_prep
  write_image
  create_big_volume
  mount_root
  sync_big_volume 
  mount_nonroot
  configure_os
  unmount_nonroot
  unmount_root
  kill $sudo_loop_pid
}


function output() {
  echo "OUTPUT:  ${1}"
}


function fail() {
  echo "ERROR:  ${1}" >&2
  exit 1
}


function get_root() {
  output "We're going to need some root.  Authenticate for sudo."
  sudo -v || fail "Failed to get root."
}


function keep_root() {
  while sleep 60; do
    sudo -v
  done
}


function write_image() {
  output "Writing image."
  # https://www.armbian.com/orange-pi-pc-plus/
  # https://dl.armbian.com/orangepipcplus/Debian_stretch_next.7z.torrent
  dd if="${image:-imageUnset}" bs=1M | pv | sudo dd bs=1M of="${card_device:-deviceUnset}" \
    || fail "Failed to write image."
  sudo parted $card_device resizepart "${root_partition_index}" 10240MB \
    || fail "Failed to resize root partition."
  sudo e2fsck -f $root_partition \
    || fail "Failed to check root filesystem."
  sudo resize2fs $root_partition \
    || fail "Failed to resize root filesystem."
  sudo tune2fs -i 0 -c 0 $root_partition \
    || fail "Failed to tune root filesystem."
}


function unmount_prep() {
  for m in /mnt/card/boot /mnt/card"${mount_point}" /mnt/card /mnt/card2; do
    if mountpoint "${m}" > /dev/null 2>&1; then
      sudo umount "${m}" \
        || fail "Failed to preparatively unmount:  ${m}"
    fi
  done
}


function mount_nonroot() {
  if test 'set' = "${boot_partition:+set}"; then
    sudo mkdir -p /mnt/card/boot
    sudo mount $boot_partition /mnt/card/boot \
      || fail "Failed to mount boot partition."
  fi

  sudo mount $big_partition /mnt/card"${mount_point}" \
    || fail "Failed to mount big partition."
}


function unmount_nonroot() {
  sudo umount /mnt/card"${mount_point}" \
    || fail "Failed to unmount big partition."

  if test 'set' = "${boot_partition:+set}"; then
    sudo umount /mnt/card/boot \
      || fail "Failed to unmount boot partition."
  fi
}


function mount_root() {
  sudo mount $root_partition /mnt/card \
    || fail "Failed to mount root partition."
}


function unmount_root() {
  sudo umount /mnt/card \
    || fail "Failed to unmount root partition."
}


function sync_big_volume() {
  sudo mount $big_partition /mnt/card2 \
    || fail "Failed to mount big partition to alternative mount point."
  sudo mkdir -p "/mnt/card${mount_point}/" \
    || fail "Failed to create mount point."
  sudo rsync -a "/mnt/card${mount_point}/" /mnt/card2/ \
    || fail "Failed to sync contents of mount point to big partition."
  for f in $(ls -a "/mnt/card${mount_point}/"); do
    if ! test '.' = "${f}" && ! test '..' = "${f}"; then
      sudo rm -rf "/mnt/card${mount_point}/${f}" \
        || fail "Failed to remove contents of mount point."
    fi
  done
  sudo umount /mnt/card2/ \
    || fail "Failed to unmount big partition from alternate mount point."
}


function create_big_volume() {
  output "Getting storage parameters."
  parted_output=$(
    sudo parted $card_device unit s print free \
      || fail "Failed to analyze device:  '${card_device}'"
  )

  output "Writing big partition."
  sudo parted $card_device mkpart primary 10241MB -- -1MB \
    || fail "Failed to write big partition."
  output "Writing big filesystem."
  sudo mkfs.f2fs -f -l $label $big_partition \
    || fail "Failed to write big filesystem."
}


function configure_os() {
  echo "LABEL=${label} ${mount_point} f2fs defaults,noatime,nodiratime 0 2" | sudo tee -a /mnt/card/etc/fstab \
    || fail "Failed to write fstab."

  if test "yes" = $debug; then
    # This is for debugging.  log2ram is probably good for sd card life.
    sudo sed -i 's/^ENABLED=.*$/ENABLED=false/' /mnt/card/etc/default/armbian-ramlog \
      || fail "Failed to disabled log2ram."
  fi

  sudo mkdir -p /mnt/card/root/.ssh \
    || fail "Failed to prepare dot ssh directory."
  sudo tee /mnt/card/root/.ssh/authorized_keys < /home/aaron/.ssh/public \
    || fail "Failed to install authorized key."

  # Shadow line can contain slashes.
  if sudo grep -q ^root /mnt/card/etc/shadow; then
    sudo sed -i 's#^root:.*$#'"$(shadow_line root)"'#' /mnt/card/etc/shadow \
      || fail "Failed to write password hash for root."
  else
    shadow_line root | sudo tee -a /mnt/card/etc/shadow \
      || fail "Failed to write shadow line for root."
  fi

  sudo sed -i 's/^pi:.*$/pi:*:18409:0:99999:7:::/' /mnt/card/etc/shadow \
    || fail "Failed to delete password hash for pi."

  sudo sed -i 's/^pi:.*$/pi:*:1000:1000:,,,:\/home\/pi:\/bin\/bash/' /mnt/card/etc/passwd \
    || fail "Failed to disable password authentication for pi."

  for dir in \
    /mnt/card/etc/init.d/ \
    /mnt/card/etc/systemd/network/ \
    /mnt/card/etc/systemd/system/default.target.wants/ \
    /mnt/card/etc/systemd/system/multi-user.target.wants/ \
    /mnt/card/lib/systemd/system/ \
    /mnt/card/usr/bin/ \
    /mnt/card/usr/lib/armbian/ \
    /mnt/card/usr/local/bin/ \
  ; do
    sudo mkdir -p "${dir}"
  done

  for file in \
    /etc/rc3.d/S01resizefs_once \ /etc/init.d/resizefs_once \
    /mnt/card/boot/cmdline.txt \ /mnt/card/etc/init.d/dhcpcd \
    /mnt/card/etc/profile.d/armbian-check-first-login-reboot.sh \
    /mnt/card/etc/profile.d/armbian-check-first-login.sh \
    /mnt/card/etc/ssh/ssh_host_*_key* \
    /mnt/card/etc/systemd/network/99-default.link \
    /mnt/card/etc/systemd/system/default.target.wants/avahi-daemon.service \
    /mnt/card/etc/systemd/system/default.target.wants/dhcpcd.service \
    /mnt/card/etc/systemd/system/default.target.wants/nfs-client.target \
    /mnt/card/etc/systemd/system/default.target.wants/raspberrypi-net-mods.service \
    /mnt/card/etc/systemd/system/default.target.wants/regenerate_ssh_host_keys.service \
    /mnt/card/etc/systemd/system/default.target.wants/remote-fs.target \
    /mnt/card/etc/systemd/system/default.target.wants/ssh.service \
    /mnt/card/etc/systemd/system/default.target.wants/triggerhappy.service \
    /mnt/card/etc/systemd/system/multi-user.target.wants/NetworkManager.service \
    /mnt/card/etc/systemd/system/multi-user.target.wants/armbian-firstrun-config.service \
    /mnt/card/etc/systemd/system/multi-user.target.wants/armbian-firstrun-config.service \
    /mnt/card/lib/systemd/system/NetworkManager.service \
    /mnt/card/lib/systemd/system/apply_noobs_os_config.service \
    /mnt/card/lib/systemd/system/armbian-firstrun-config.service \
    /mnt/card/lib/systemd/system/armbian-firstrun.service \
    /mnt/card/lib/systemd/system/armbian-resize-filesystem.service \
    /mnt/card/lib/systemd/system/dhcpcd.service \
    /mnt/card/lib/systemd/system/raspberrypi-net-mods.service \
    /mnt/card/lib/systemd/system/regenerate_ssh_host_keys.service \
    /mnt/card/usr/bin/raspi-config \
    /mnt/card/usr/lib/armbian/armbian-firstrun \
    /mnt/card/usr/lib/armbian/armbian-firstrun-config \
    /mnt/card/var/lib/systemd/deb-systemd-helper-enabled/multi-user.target.wants/NetworkManager.service \
    /mnt/card/var/lib/systemd/deb-systemd-helper-enabled/multi-user.target.wants/regenerate_ssh_host_keys.service \
  ; do
    sudo rm -f $file \
      || fail "Failed to remove:  ${file}"
  done

  for file in \
    /mnt/card/etc/init.d/dhcpcd \
    /mnt/card/etc/systemd/network/99-default.link \
    /mnt/card/etc/systemd/system/default.target.wants/avahi-daemon.service \
    /mnt/card/etc/systemd/system/default.target.wants/dhcpcd.service \
    /mnt/card/etc/systemd/system/default.target.wants/nfs-client.target \
    /mnt/card/etc/systemd/system/default.target.wants/raspberrypi-net-mods.service \
    /mnt/card/etc/systemd/system/default.target.wants/regenerate_ssh_host_keys.service \
    /mnt/card/etc/systemd/system/default.target.wants/remote-fs.target \
    /mnt/card/etc/systemd/system/default.target.wants/triggerhappy.service \
    /mnt/card/etc/systemd/system/multi-user.target.wants/NetworkManager.service \
    /mnt/card/etc/systemd/system/multi-user.target.wants/armbian-firstrun-config.service \
    /mnt/card/lib/systemd/system/NetworkManager.service \
    /mnt/card/lib/systemd/system/apply_noobs_os_config.service \
    /mnt/card/lib/systemd/system/armbian-firstrun-config.service \
    /mnt/card/lib/systemd/system/armbian-firstrun.service \
    /mnt/card/lib/systemd/system/armbian-resize-filesystem.service \
    /mnt/card/lib/systemd/system/dhcpcd.service \
    /mnt/card/lib/systemd/system/raspberrypi-net-mods.service \
    /mnt/card/lib/systemd/system/regenerate_ssh_host_keys.service \
    /mnt/card/usr/lib/armbian/armbian-firstrun \
    /mnt/card/usr/lib/armbian/armbian-firstrun-config \
    /mnt/card/usr/local/bin/raspi-config \
    /mnt/card/var/lib/systemd/deb-systemd-helper-enabled/multi-user.target.wants/regenerate_ssh_host_keys.service \
  ; do
    sudo ln -s /dev/null $file \
      || fail "Failed to replace file with symlink to /dev/null:  '${file}'"
  done

  wpa_psk=$(pass show aaron/network/puppies/wpa_psk) \
    || fail "Failed to read WPA PSK."
  sudo tee /mnt/card/etc/network/interfaces.d/"${wireless_interface}" << EOF
iface ${wireless_interface} inet static
    wpa-essid           puppies
    wpa-psk             $wpa_psk
    address             $ip_address
    netmask             255.255.255.0
    gateway             192.168.11.1
    dns-nameservers     192.168.11.54
    dns-search          neuronpointer.net
EOF
  if ! test 0 == "${?}"; then
    fail "Failed to write:  interfaces.d/${wireless_interface}" 
  fi
  sudo tee /mnt/card/etc/network/interfaces.d/"${wired_interface}" << EOF
iface ${wired_interface} inet static
    address             $ip_address
    netmask             255.255.255.0
    gateway             192.168.11.1
    dns-nameservers     192.168.11.54
    dns-search          neuronpointer.net
EOF
  if ! test 0 == "${?}"; then
    fail "Failed to write:  interfaces.d/${wired_interface}" 
  fi
  echo "auto ${wired_interface}" | sudo tee -a /mnt/card/etc/network/interfaces \
    || fail "Failed to write to interfaces file."

  
  sudo mkdir -p /mnt/card/etc/ssh/ \
    || fail "Failed to create ssh configuration directory."
  {
    sudo tee -a /mnt/card/etc/ssh/sshd_config \
      || fail "Failed to write to sshd_config."
  } << EOF
AllowUsers root
HostKey /etc/ssh/ssh_host_rsa_key
UsePam no
EOF

  sudo mkdir -p /mnt/card/etc/systemd/system/default.target.wants \
    || fail "Failed to create some systemd directory."
  sudo ln -s /lib/systemd/system/ssh.service /mnt/card/etc/systemd/system/default.target.wants/ssh.service \
    || fail "Failed to write ssh service file."

  sudo touch /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to initialize SSH host key."
  sudo chmod 0600 /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to set permissions on SSH host key."
  if ! test -e ~/control_center/sensitive_ansible/inventory/hosts/${target_host_name}/files/ssh_keys/ssh_host_rsa_key; then
    fail "SSH host key (private) is missing."
  fi
  cat ~/control_center/sensitive_ansible/inventory/hosts/${target_host_name}/files/ssh_keys/ssh_host_rsa_key | sudo tee /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to write SSH host key (private)."
  if ! test -e ~/control_center/ansible/inventory/hosts/${target_host_name}/files/ssh_keys/ssh_host_rsa_key.pub; then
    fail "SSH host key (public) is missing."
  fi
  cat ~/control_center/ansible/inventory/hosts/${target_host_name}/files/ssh_keys/ssh_host_rsa_key.pub | sudo tee /mnt/card/etc/ssh/ssh_host_rsa_key.pub \
    || fail "Failed to write SSH host key (public)."

  sudo tee /mnt/card/etc/rc.local << EOF
#!/bin/sh
rfkill block bluetooth uwb wimax wwan gps fm nfc
rfkill unblock wlan
EOF
  if test "yes" = "${kick_wifi}"; then
    sudo touch /mnt/card/usr/local/bin/kick_wifi \
      || fail "Failed to touch kick_wifi script."
    sudo chmod 0755 /mnt/card/usr/local/bin/kick_wifi \
      || fail "Failed to chmod 0755 kick_wifi script."
    sudo tee -a /mnt/card/usr/local/bin/kick_wifi << EOF
#!/bin/sh
> /var/log/kick_wifi.log
sync
sleep 5
ip addr >> /var/log/kick_wifi.log 2>&1
date >> /var/log/kick_wifi.log 2>&1
ifup ${wireless_interface} >> /var/log/kick_wifi.log 2>&1
date >> /var/log/kick_wifi.log 2>&1
ip addr >> /var/log/kick_wifi.log 2>&1
iwlist ${wireless_interface} scan >> /var/log/kick_wifi.log 2>&1
uptime >> /var/log/kick_wifi.log 2>&1
sync
EOF
    sudo tee -a /mnt/card/etc/rc.local << EOF
/usr/local/bin/kick_wifi
EOF
    if ! test 0 == "${?}"; then
      fail "Failed to write:  /etc/rc.local"
    fi
  fi
  sudo tee -a /mnt/card/etc/rc.local << EOF
exit 0
EOF
}


function shadow_line() {
  user="${1}"
  valid_characters=()
  for c in {a..z} {A..Z} {0..9} '/' '.'; do
    valid_characters+=( "${c}" )
  done
  salt=
  for i in {1..16}; do
    i=$(( RANDOM % 64 ))
    salt+="${valid_characters[i]}"
  done
  salt_length="$(wc -m <<< "${salt}")"
  if ! test "${salt_length}" -eq 17; then
    fail "Failed to generate a salt of appropriate length.  (${salt_length} / 16)"
  fi
  pass show "aaron/${target_host_name}/${user}" > /dev/null || fail "Failed to retrieve password from pass for:  '${user}'"
  password_length="$(pass show "aaron/${target_host_name}/${user}" | wc -m)"
  if ! test "${password_length}" -gt 4; then
    fail "Failed to generate a password of appropriate length.  (${password_length} / 4)"
  fi
  hash="$(
    pass show "aaron/${target_host_name}/${user}" \
      | mkpasswd -S "${salt}" -m sha-512 --stdin \
      || fail "mkpasswd returned:  ${?}"
  )"
  hash_length="$(wc -m <<< "${hash}")"
  if ! test "${hash_length}" -eq 107; then
    fail "Failed to generate a hash of appropriate length.  (${hash_length} / 107)"
  fi
  days_since_epoch="$(( $(date +%s) / 60 / 60 / 24 ))"
  if ! test "${days_since_epoch}" -gt 1; then
    fail "Failed to generate a reasonable number of days since the epoch.  (${days_since_epoch} / 1)"
  fi

  echo "${user}:${hash}:${days_since_epoch}::::::"
}


time main "${@}"
