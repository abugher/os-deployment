#!/bin/bash
#
# mkvm <host>


# Pseudo-constant variables that should probably be arguments.
#arch='armhf'
arch='amd64'
os='debian'
release='bookworm'
version='12.11.0'
mem_gb='4'
mem_mb="$(( mem_gb * 1024 ))"
vm_image_size='10G'
control_center=~/control-center
cpu_core_count=4


# Non-configuration pseudo-constant variable(s).
case "${arch}" in
  'i386')
    initrd_path='install.386'
    ;;
  'amd64')
    initrd_path='install.amd'
    ;;
  *)
    fail "Unrecognized architecture:  '${arch}'"
    ;;
esac


function main() {
  # Handle arguments.
  if ! test 1 = "${#}"; then
    fail "Wrong number of arguments.  Just specify a short hostname."
  fi
  host="${1}"
  port="$(awk '/ssh_unique_port/ {print $2}' "${control_center}"/ansible/inventory/inventory.d/host_vars/"${host}".yml | sed "s/['\"]//g")"
  if ! grep -qE '^[0-9]+$' <<< "${port}"; then
    fail "Invalid port number:  '${port}'"
  fi

  # Pseudo-constant variables that should perhaps be overrideable by environment variables.
  # Some of these are dependent on argument handling.
  preseed_template_dir=~/control-center/os-deployment/conf
  preseed_template_file="${preseed_template_dir}/${arch}-${os}-${release}.cfg"
  preseed_generated_dir=~/.mkvm/preseed/"${host}"
  # I think this has to be named "preseed.cfg".
  preseed_generated_file="${preseed_generated_dir}/preseed.cfg"
  unpack=~/.mkvm/"installer_unpack_${host}"
  vm_image_clean_dir=~/.mkvm/vm_images_clean
  vm_image_clean="${vm_image_clean_dir}/${host}.qcow"
  vm_image_used_dir=~/.mkvm/vm_images_used
  vm_image_used="${vm_image_used_dir}/${host}.qcow"
  installer_images=~/.mkvm/installer_images
  installer_image_original="/storage/bittorrent/content/${os}-${version}-${arch}-netinst.iso"
  installer_image_generated="${installer_images}/preseed-${os}-${version}-${arch}-${port}-netinst.iso"
  pass_path="aaron/${host}/root"
  pass_file=~/.password-store/"${pass_path}".gpg
  ssh_host_key_private_file="${control_center}"/sensitive-ansible/inventory/hosts/"${host}"/files/ssh_keys/ssh_host_rsa_key
  ssh_host_key_public_file="${control_center}"/ansible/inventory/hosts/"${host}"/files/ssh_keys/ssh_host_rsa_key.pub
  # Change directory -- probably not necessary.
  #bin_path="${0%/*}"
  #cd "${bin_path}" || fail "Failed to change directory to executable path:  '${bin_path}'"
  #cd .. || fail "Failed to changed directory above executable path."

  # Maybe this script should do different things depending on how it is called.
  self_name="${0##*/}"

  case "${self_name}" in
    mkvm)
      mkvm
      ;;
    sshvm)
      sshvm
      ;;
    *)
      fail "I don't know how to be '${self_name}'."
  esac
}


function mkvm() {
  remove_stale_files
  create_directories
  generate_preseed
  generate_installer_image
  generate_vm_image
  info "Launching VM im background."
  launch_vm &
}


function remove_stale_files() {
  info "Removing any stale files."
  if 
    ! test "${preseed_generated_file}" -nt "${preseed_template_file}" \
    || ! test "${preseed_generated_file}" -nt "${pass_file}" \
    || ! test "${preseed_generated_file}" -nt "${ssh_host_key_private_file}" \
    || ! test "${preseed_generated_file}" -nt "${ssh_host_key_public_file}"
  then
    rm -f "${preseed_generated_file}" || fail "Failed to remove stale generated preseed."
  fi

  if
    ! test "${installer_image_generated}" -nt "${preseed_generated_file}" \
    || ! test "${installer_image_generated}" -nt "${installer_image_original}"
  then
    rm -f "${installer_image_generated}" || fail "Failed to remove stale generated installer image."
  fi

  if
    ! test "${vm_image_clean}" -nt "${installer_image_generated}"
  then
    rm -f "${vm_image_clean}" || fail "Failed to remove stale clean VM image."
  fi

  # Unconditionally remove image.  It's probably full of ansible-deployed changes.
  rm -f "${vm_image_used}" || fail "Failed to remove stale used VM image."

#  if
#    ! test "${vm_image_used}" -nt "${vm_image_clean}"
#  then
#    rm -f "${vm_image_used}" || fail "Failed to remove stale used VM image."
#  fi
}


function create_directories() {
  info "Creating directories."
  mkdir -p "${preseed_generated_dir}" || fail "Failed to create preseed directory:  '${preseed_dir}'"
  mkdir -p "${unpack}" || fail "Failed to create installer unpack directory:  '${unpack}'"
  mkdir -p "${vm_image_clean_dir}" || fail "Failed to create images directory:  '${vm_image_clean_dir}'"
  mkdir -p "${vm_image_used_dir}" || fail "Failed to create images directory:  '${vm_image_clean_dir}'"
  mkdir -p "${installer_images}" || fail "Failed to create images directory:  '${vm_image_clean_dir}'"
}


function generate_preseed() {
  if test -e "${preseed_generated_file}"; then
    info "Generated preseed file is already present."
    return 0
  fi
  info "Generating preseed file."
  cp "${preseed_template_file}" "${preseed_generated_file}" || fail "Failed to copy preseed file."
  sed -i "s/password \$/password $(pass show "${pass_path}")/" "${preseed_generated_file}" || fail "Failed to inject password into preseed file."
  ssh_host_key_private="$(while read line; do if ! grep -q -- '-----' <<< "${line}"; then printf "%s" "${line}"; fi; done < "${ssh_host_key_private_file}")" || fail "Failed to read SSH private key."
  sed -i "s#ssh_host_key_private#${ssh_host_key_private}#" "${preseed_generated_file}" || fail "Failed to inject SSH private key into preseed file."
  ssh_host_key_public="$(cat "${ssh_host_key_public_file}")" || fail "Failed to read SSH public key."
  sed -i "s#ssh_host_key_public#${ssh_host_key_public}#" "${preseed_generated_file}" || fail "Failed to inject SSH public key into preseed file."
}


function generate_installer_image() {
  if test -e "${installer_image_generated}"; then
    info "Generated installer image is already present."
    return 0
  fi
  info "Generating installer image."
  unpack_image
  unpack_initrd
  inject_preseed
  repack_initrd
  configure_boot
  regenerate_checksums
  repack_image
}


function generate_vm_image() {
  if test -e "${vm_image_clean}"; then
    info "Clean VM image is already present."
    return 0
  fi
  info "Generating clean VM image."
  initialize_vm_image
  install_os
}


function launch_vm() {
  if ! test "${vm_image_used}" -nt "${vm_image_clean}"; then
    cp "${vm_image_clean}" "${vm_image_used}" || fail "Failed to copy clean VM image to used VM image."
  fi
  boot_this_image "${vm_image_used}"
}


# boot_this_image <vm_image_file>
boot_this_image() {
  image_file="${1}"
  shift 1
  qemu-system-x86_64 \
    -nic user,hostfwd=tcp::"${port}"-:22 \
    -machine pc \
    -cpu max \
    -smp cores="${cpu_core_count}" \
    -m "${mem_mb}" \
    -hda "${image_file}" \
    -nographic \
    "${@}" \
    > /dev/null \
    < /dev/null
}


function wait_for_ssh() {
  while 
    ! sshvm whoami > /dev/null 2>&1
  do
    echo -n '.'
    sleep 1
  done
}


function sshvm() {
  sshpass \
    -d 3 \
    ssh \
      -p "${port}" \
      root@127.0.0.1 \
      "${@}" \
    3< <(pass show "${pass_path}")
}


function unpack_image() {
  if test -e "${unpack}"; then
    chmod -R u+rwX "${unpack}" || fail "Failed to prepare installer unpack directory for deletion:  '${unpack}'"
    rm -rf "${unpack}" || fail "Failed to remove installer unpack directory:  '${unpack}'"
  fi
  7zz x -o"${unpack}/" "${installer_image_original}" || fail "Failed to unpack installer image:  '${installer_image_generated}'"
}


function unpack_initrd() {
  chmod +w -R "${unpack}/${initrd_path}"/ || fail "Failed to set write permission for initrd file."
  gunzip "${unpack}/${initrd_path}"/initrd.gz || fail "Failed to unpack initrd file."
}


function inject_preseed() {
  cd "${preseed_generated_dir}" || fail "Failed to enter path to generated preseed."
  cpio -o -H newc -A -F "${unpack}/${initrd_path}/initrd" <<< preseed.cfg || fail "Failed to append preseed file to initrd file."
}


function repack_initrd() {
  gzip "${unpack}/${initrd_path}"/initrd || fail "Failed to repack initrd file."
  chmod -w -R "${unpack}/${initrd_path}"/ || fail "Failed to revoke write permission for initrd file."
}


function configure_boot() {
  sed -i '/include gtk/ {d};' "${unpack}"/isolinux/menu.cfg || fail "Failed to remove GTK installer boot option."
  sed -i '/include spk/ {d};' "${unpack}"/isolinux/menu.cfg || fail "Failed to remove speech synthesis features from boot menu."
  sed -i -E 's/^(label install)/default install\n\1/' "${unpack}"/isolinux/txt.cfg || fail "Failed to make non-graphical installer boot option default."
  echo 'timeout 10' >> "${unpack}/isolinux/txt.cfg" || fail "Failed to add timeout option to boot menu."
}


function regenerate_checksums() {
  cd "${unpack}" || fail "Failed to enter installer unpack directory:  '${unpack}'"
  alg='md5'
  checksum="${alg}sum"
  checksum_file="${checksum}.txt"
  chmod +w "${checksum_file}" || fail "Failed to set write permission on checksum file:  '${checksum_file}'"
  find -follow -type f ! -name "${checksum_file}" -print0 | xargs -0 "${checksum}" > "${checksum_file}"
  chmod -w "${checksum_file}" || fail "Failed to revoke write permissions on checksum file:  '${checksum_file}'"
  cd "${OLDPWD}" || fail "Failed to exit installer unpack directory."
}


function repack_image() {
  genisoimage \
    -r -J \
    -b "isolinux/isolinux.bin" \
    -c "isolinux/boot.cat" \
    -no-emul-boot \
    -boot-load-size 4 \
    -boot-info-table \
    -o "${installer_image_generated}" \
    "${unpack}/" \
    || fail "Failed to generate installer image:  '${installer_image_generated}'"

  isohybrid "${installer_image_generated}" || fail "Failed to make installer image bootable:  '${installer_image_generated}'"
}


function initialize_vm_image() {
  info "Initializing clean VM image."
  qemu-img create -f qcow2 "${vm_image_clean}" "${vm_image_size}" || fail "Failed to create target disk image:  '${vm_image_clean}'"
}


function install_os() {
  info "Installing OS to clean VM image."
  boot_this_image "${vm_image_clean}" \
    -cdrom "${installer_image_generated}" \
    -boot once=d \
    || fail "Failed to install OS to clean VM image."
}


function fail() {
  printf '%s\n' "${1}" >&2
  exit "${2:-1}"
}


function info() {
  printf '%s\n' "${1}"
}


main "${@}"
