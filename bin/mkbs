#!/bin/bash
# 
# mkbs
# MaKe BootStick
# 
# Create a bootable USB stick using debootstrap.  Target OS is Debian or very
# similar.  (Developed on Devuan.)
#
# Usage:
#   mkbs <device>


for lib in lib/functions/* lib/mkbs_functions/*; do
  if ! source "${lib}"; then
    echo "ERROR:  Failed to source:  ${lib}" >&2
    exit 1
  fi
done

if test 'set' = "${1:+set}"; then
  device="${1}"
else
  fail 'Specify a device.'
fi

if test 'set' = "${2:+set}"; then
  release="${2}"
else
  fail 'Specify a Devuan release code name.'
fi

host=bootstick

efi="${device}"2
boot="${device}"3
pv="${device}"4
luks="${host}_${device##*/}_crypt"
vg="${host}_${device##*/}"

target_mount_point=/mnt/"${host}_${device##*/}"


# Invoke the main function.  Respect the debug level specified in DEBUG_LEVEL.
# All functions are now free to direct output to file descriptors indexed up to
# max_debug_level.  Descriptors with index higher than DEBUG_LEVEL will be
# silenced.
#
# DEBUG_LEVEL less than 2 will silence stderr; less than 1 will silence stdout.
# That could be problematic and is not advised, but it is allowed.
eval time main "\"\${@}\"" $(
  for ((d=1; d<=max_debug_level; d++)); do 
    if test "${d}" -eq 2; then
      echo "${d}>&2"
    elif test "${d}" -le "${DEBUG_LEVEL}"; then 
      echo "${d}>&1"
    else 
      echo "${d}>/dev/null"
    fi
  done
)
