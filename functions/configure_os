#!/bin/bash


function configure_os() {
  if test 'set' = "${use_big_partition:+set}"; then
    sudo tee -a /mnt/card/etc/fstab \
      <<< "LABEL=${big_partition_label} ${big_partition_mount_point} f2fs defaults,noatime,nodiratime 0 2" \
      || fail "Failed to write big partition line to /etc/fstab"
  fi

  if test "set" = "${log_to_disk:+set}"; then
    # log2ram is probably good for sd card life.
    sudo sed -i 's/^ENABLED=.*$/ENABLED=false/' /mnt/card/etc/default/armbian-ramlog \
      || fail "Failed to disabled log2ram."
  fi

  # Shadow line can contain slashes.
  if sudo grep -q ^root /mnt/card/etc/shadow; then
    shadow_line="$(shadow_line root)" \
      || fail "Failed to generate shadow line."
    sudo sed -i 's#^root:.*$#'"${shadow_line}"'#' /mnt/card/etc/shadow \
      || fail "Failed to write password hash for root."
  else
    shadow_line root | sudo tee -a /mnt/card/etc/shadow \
      || fail "Failed to write shadow line for root."
  fi

  sudo sed -i 's/^pi:.*$/pi:*:18409:0:99999:7:::/' /mnt/card/etc/shadow \
    || fail "Failed to delete password hash for pi."

  sudo sed -i 's/^pi:.*$/pi:*:1000:1000:,,,:\/home\/pi:\/bin\/bash/' /mnt/card/etc/passwd \
    || fail "Failed to disable password authentication for pi."

  for dir in "${create_directories[@]}"; do
    sudo mkdir -p "/mnt/card${dir}"
  done

  for file in "${remove_files[@]}"; do 
    sudo rm -f $file \
      || fail "Failed to remove:  ${file}"
  done

  for file in "${null_link_files[@]}"; do
    sudo ln -s /dev/null $file \
      || fail "Failed to replace file with symlink to /dev/null:  '${file}'"
  done

  wpa_psk=$(pass show aaron/network/puppies/wpa_psk) \
    || fail "Failed to read WPA PSK."

  template wireless_interface_conf /etc/network/interfaces.d/"${wireless_interface}"
  template wired_interface_conf /etc/network/interfaces.d/"${wired_interface}"

  sudo tee -a /mnt/card/etc/network/interfaces \
    <<< "auto ${active_interface}" \
    || fail "Failed to write auto line to interfaces file."

  template sshd_config /etc/ssh/sshd_config

  sudo ln -s /lib/systemd/system/ssh.service /mnt/card/etc/systemd/system/default.target.wants/ssh.service \
    || fail "Failed to write ssh service file."

  sudo touch /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to initialize SSH host key."
  sudo chmod 0600 /mnt/card/etc/ssh/ssh_host_rsa_key \
    || fail "Failed to set permissions on SSH host key."

  host_key_priv_file=../sensitive_ansible/inventory/hosts/${host}/files/ssh_keys/ssh_host_rsa_key
  test -e "${host_key_priv_file}" \
    || fail "SSH host key (private) is missing."
  sudo tee /mnt/card/etc/ssh/ssh_host_rsa_key \
    < "${host_key_priv_file}" \
    || fail "Failed to write SSH host key (private)."

  host_key_pub_file=../ansible/inventory/hosts/${host}/files/ssh_keys/ssh_host_rsa_key.pub
  test -e "${host_key_pub_file}" \
    || fail "SSH host key (public) is missing."
  sudo tee /mnt/card/etc/ssh/ssh_host_rsa_key.pub \
    < "${host_key_pub_file}" \
    || fail "Failed to write SSH host key (public)."

  sudo tee /mnt/card/root/.ssh/authorized_keys < /home/aaron/.ssh/public \
    || fail "Failed to install authorized key."

  template rc_local_conf /etc/rc.local

  if test "yes" = "${kick_wifi}"; then
    template kick_wifi_conf /usr/local/bin/kick_wifi

    sudo chmod 0755 /mnt/card/usr/local/bin/kick_wifi \
      || fail "Failed to chmod 0755 kick_wifi script."

    sudo tee -a /mnt/card/etc/rc.local \
      <<< '/usr/local/bin/kick_wifi' \
      || fail "Failed to append kick_wifi line to:  /etc/rc.local"
  fi

  sudo tee -a /mnt/card/etc/rc.local \
    <<< 'exit 0' \
    || fail "Failed to write 'exit 0' line to:  /etc/rc.local"
}


function shadow_line() {
  user="${1}"
  valid_characters=()
  for c in {a..z} {A..Z} {0..9} '/' '.'; do
    valid_characters+=( "${c}" )
  done
  salt=
  for i in {1..16}; do
    i=$(( RANDOM % 64 ))
    salt+="${valid_characters[i]}"
  done
  salt_length="$(wc -m <<< "${salt}")"
  if ! test "${salt_length}" -eq 17; then
    fail "Failed to generate a salt of appropriate length.  (${salt_length} / 16)"
  fi
  pass show "aaron/${host}/${user}" \
    > /dev/null \
    || fail "Failed to retrieve password from pass for:  '${user}'"
  password_length="$(pass show "aaron/${host}/${user}" | wc -m)"
  if ! test "${password_length}" -gt 4; then
    fail "Failed to generate a password of appropriate length.  (${password_length} / 4)"
  fi
  hash="$(
    pass show "aaron/${host}/${user}" \
      | mkpasswd -S "${salt}" -m sha-512 --stdin \
      || fail "mkpasswd returned:  ${?}"
  )"
  hash_length="$(wc -m <<< "${hash}")"
  if ! test "${hash_length}" -eq 107; then
    fail "Failed to generate a hash of appropriate length.  (${hash_length} / 107)"
  fi
  days_since_epoch="$(( $(date +%s) / 60 / 60 / 24 ))"
  if ! test "${days_since_epoch}" -gt 1; then
    fail "Failed to generate a reasonable number of days since the epoch.  (${days_since_epoch} / 1)"
  fi

  echo "${user}:${hash}:${days_since_epoch}::::::"
}
